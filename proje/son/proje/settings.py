"""
Django settings for proje project.
                pip install -r requirements.txt = kütüphaneleri yüklemek için bu komutu çalıştırın                                          

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'backend.CustomUser'
SECRET_KEY='django-insecure-m4sottbwd&_3+y5z_@y7udqr#3$194t7b+8p3akd8h4@eeq@5o'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

DEBUG = True
import os 

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']



# Application definition

INSTALLED_APPS = [
    'backend',
    'rest_framework', # Bu, Django Rest Framework'ün kısa adı. Django normalde web siteleri yaparken kullanılır ama rest_framework ile web siteleri yerine API dediğimiz sistemleri yaparız. API, başka uygulamaların senin uygulamana bağlanıp veri alıp göndermesine izin veren bir sistemdir.
    'rest_framework_simplejwt.token_blacklist', #SimpleJWT, Django'ya kimlik doğrulama (login yapma) eklemek için kullanılır. Ama bu kimlik doğrulama yöntemi biraz farklıdır: Her kullanıcıya giriş yaptığında bir token (jeton) verir. Bu token, kim olduğunu ispatlayan bir tür dijital anahtardır.
    # Stoken_blacklist: Giriş yapan kullanıcılara verilen dijital anahtarları (token'ları) geçersiz yapmak için kullanılır. Örneğin, bir kullanıcı çıkış yaptığında, artık onun token'ı çalışmaz hale gelir.
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proje.urls'

# settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,  'templates')],  # Uygulama dizininde şablonlar
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proje.wsgi.application'
REST_FRAMEWORK = {
    # JWTAuthentication: Bu, JSON Web Token (JWT) adlı bir kimlik doğrulama yöntemidir.
    # Kullanıcı giriş yaptıktan sonra ona bir token (dijital anahtar) verilir.
    # Bu token, her istekte (örneğin, bir sayfaya erişmek için) sunucuya gönderilir
    # ve sunucu bu token ile kullanıcının kim olduğunu doğrular.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    
    # JSON render'ları için
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer',  # HTML render'ları için
    ],
}



from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Access token süresi Kullanıcı giriş yaptıktan sonra alır ve bu token, belirli bir süre boyunca (örneğin, burada 5 dakika) geçerli olur.
#5 dakika boyunca bu token ile istekler (API talepleri) gönderebilir ve kimliği doğrulanmış olur.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # Refresh token süresi 5 dakika dolduğunda access token geçersiz hale gelir, yani artık bu token ile işlem yapılamaz. Ancak, kullanıcı tekrar şifre girmeden refresh token ile yeni bir access token alabilir.
    #Refresh token daha uzun süre (örneğin, 7 gün) geçerlidir. Eğer access token süresi dolarsa, refresh token kullanılarak yeni bir access token alınır ve kullanıcı tekrar giriş yapmadan siteyi kullanmaya devam eder.
    #Bu işlem arka planda otomatik olarak yapılabilir, kullanıcı bu yenilemeyi fark etmez.
    #                # Token'ların güvenliğini sağlayan gizli anahtardır. Token'lar bu anahtarla imzalanır, böylece değiştirildiği anlaşılıp güvenlik sağlanır.
}
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get("POSTGRES_ENGINE"),
        'NAME': os.environ.get("POSTGRES_DB"),
        'USER': os.environ.get("POSTGRES_USER"),
        'PASSWORD': os.environ.get("POSTGRES_PASSWORD"),
        'HOST': os.environ.get("POSTGRES_HOST"),
        'PORT': os.environ.get("POSTGRES_PORT"),
    }
}
import os




# 42 API Credentials
CLIENT_ID = os.environ.get('CLIENT_ID')
CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
REDIRECT_URI = os.environ.get('REDIRECT_URI')
AUTHORIZATION_URL = os.environ.get('AUTHORIZATION_URL')
TOKEN_URL = os.environ.get('TOKEN_URL')
USER_PROFILE_URL = os.environ.get('USER_PROFILE_URL')

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' 
#1?
